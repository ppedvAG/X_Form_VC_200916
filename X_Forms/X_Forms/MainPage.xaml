<?xml version="1.0" encoding="utf-8" ?>
<!--vgl. CodeBehind-->

<!--Jede XAML-Datei hat einen Root-Container, welcher die Art der UI bestimmt. Dieser muss mit der Mutterklasse im CodeBehind übereinstimmen-->
<!--Im Root-Container werden die in diesem Dokument benutzten Namespaces definiert, sowie der Verweis auf die anhängige Klasse (CodeBehind)-->
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:d="http://xamarin.com/schemas/2014/forms/design"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             xmlns:local="clr-namespace:X_Forms"
             x:Class="X_Forms.MainPage"
             Padding="10"
             Title="Startseite">

    <!--Jeder Container hat eine Resource-Property, in welcher Ressourcen (Objekte, Styles, Converter, ...) für diesen 
    Container bereit gestellt werden können.-->
    <ContentPage.Resources>
        <!--Über das Präfix (Zeichen vor dem Doppelpunkt) wird der entsprechende Namespace angesteuert-->
        <!--Jede Ressource (außer globalen Styles) benötigen einen Key, über welche diese angersteuert werden können.-->
        <x:String x:Key="BtnText">Hallo Welt, klick mich</x:String>
        <local:FactorConverter x:Key="factorConv"/>
    </ContentPage.Resources>

    <!--Properties können direkt im einleitenden Tag mittels der Attribute gesetzt werden.-->
    <!--Vertical und HorizontalObptions definieren das Anzeige-Verhalten des UI-Elements in Bezug auf umgebende Objekte-->
    <!--Padding definiert einen Abstand des UI-Elements zu inneren Elementen-->
    <ScrollView HorizontalOptions="FillAndExpand"
             VerticalOptions="FillAndExpand"
                Padding="5,10,15,20">

        <!--Container, welche die Children-Property besitzen können mehrere Elemente beinhalten-->
        <StackLayout Orientation="Vertical"
                 HorizontalOptions="FillAndExpand"
                 VerticalOptions="FillAndExpand"
                 Spacing="5">

            <!--Mittels einer StaticResource-Bindung kann auf in übergeordneten Container definierte Ressourcen zugegriffen werden-->
            <Label Text="Hallo Welt" TextColor="Red" x:Name="Lbl_Output"
               FontSize="{StaticResource GlobalFontSize}"/>

            <Label>
                <!--Jedes UI-Element hat eien Standart-Property, auf die direkt zugegriffen werden kann (meißt Text, Children, Content)-->
                Auch Hallo Welt
            </Label>

            <Label>
                <!--Wenn Properties mit komplexeren Elementen gefüllt werden sollen, können diese ausgelagert werden.-->
                <Label.Text>
                    Nochmal Hallo
                </Label.Text>
                <Label.BackgroundColor>
                    <!--Unterschiedliche Werte auf verschiedenen OS in derselben Property-->
                    <OnPlatform Default="Red" Android="Blue" iOS="Yellow"/>
                </Label.BackgroundColor>
                <Label.TextColor>
                    <!--Unterschiedliche Werte auf verschiedenen Geräten in derselben Property-->
                    <OnIdiom Default="Black" Phone="White" Tablet="Red" Watch="Green"/>
                </Label.TextColor>
            </Label>

            <!--Dieser Button nimmt einen explizieten Button-Style an (vgl. RessourceDict.xaml)-->
            <Button Text="{StaticResource BtnText}" Clicked="Button_Clicked"/>

            <!--Grafische Ressourcen müssen in den einzelnen OS-Projekten abgelegt sein (z.B. Android/Resources/drawable)-->
            <ImageButton Source="test.png"
                        WidthRequest="50"/>

            <!--Die Placeholder-Property des Entries wird im Textfeld angezeigt, solange der Benutzer noch keinen Eintrag getätigt hat-->
            <Entry x:Name="Ent_Vorname" Placeholder="Vorname"/>
            <Entry x:Name="Ent_Nachname" Placeholder="Nachname"/>
            <!--Dieser Button nimmt den globalen Button-Style an (vgl. RessourceDict.xaml)-->
            <Button x:Name="Btn_Show" Text="Ok" Clicked="Btn_Show_Clicked"
                Style="{StaticResource Btn_Style}"/>
            <!--Die Property 'ItemSource' verweist auf die Quelle der Items für die Liste.
            Hier wurde sie per Kurzbindung an die Property 'NamenListe' des BindingContextes 
            der Page gebunden. Vgl CB-->
            <ListView x:Name="LstV_Name" HeightRequest="200"
                  ItemsSource="{Binding NamensListe}">
                <ListView.ItemTemplate>
                    <!--Mittels DataTemplates kann das Erscheinen von einzelnen Elementen von ItemControls (hier ListView) defniert werden.
                    DataTemplates müssen immer ein UI-Element vom Typ Cell beinhalten.-->
                    <DataTemplate>
                        <!--<TextCell Text="{Binding}"/>-->
                        <!--Innerhalb von ItemControls findet immer ein DataBinding an die Elemente der ItemSource statt (vgl. CodeBehind).
                            Dadurch finden Kurzbindungen an die Properties der Listenelemente statt.-->
                        <ViewCell>
                            <Label Text="{Binding}"/>

                            <!--ContextActions werden angezeigt, wenn der Benutzer (unter Android) länger auf eine Objekt 'touched'-->
                            <ViewCell.ContextActions>
                                <MenuItem Text="Löschen" Clicked="MenuItem_Clicked" CommandParameter="{Binding}"/>
                            </ViewCell.ContextActions>
                        </ViewCell>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>

            <!--Bindungen-->
            <!--Mittels Bindungen können Properties von UI-Elementen miteinander verknüpft werden.-->
            <StackLayout Orientation="Horizontal">
                <Slider Minimum="0" Maximum="100"
                    x:Name="Sdr_Binding_1"
                    WidthRequest="250"/>
                <!--Mittels einer Markup-Extension ({}-Klammern) kann eine Property an eine andere Property gebunden werden. Die Property,
                welche die Markup-Extension beinhaltet, gilt als Target-Property-->
                <Label Text="{Binding Source={x:Reference Sdr_Binding_1}, Path=Value, StringFormat='Wert: {0}'}"/>
            </StackLayout>

            <StackLayout Orientation="Horizontal">
                <Slider Minimum="0" Maximum="100"
                    x:Name="Sdr_Binding_2"
                    WidthRequest="250"/>
                <!--Soll der Wert nicht unverandert übertragen werden oder sind die Property-Typen unterschiedlich muss ein Converter
                zwischengeschaltet werden (vgl. FactorConverter.cs)-->
                <Label Text="{Binding Source={x:Reference Sdr_Binding_2}, Path=Value, StringFormat='Wert: {0}',
                Converter={StaticResource factorConv}, ConverterParameter=2.5}"/>
            </StackLayout>
            
            <!--Navigations-Bsps (vgl. CB)-->
            <StackLayout Orientation="Horizontal">
                <Button Text="Goto AbsoluteLayout" Clicked="Button_Clicked_1"/>
                <Button Text="Goto Tabbed" Clicked="Button_Clicked_2"/>
                <Button Text="Goto Carousel" Clicked="Button_Clicked_3"/>
            </StackLayout>

            <Button Text="Sender MC-Nachricht"
                    x:Name="Btn_MC"
                    Clicked="Btn_MC_Clicked"/>

            <Label x:Name="Lbl_Battery"/>

            <Label x:Name="Lbl_LocalisationBsp" Text="{x:Static local:ResourcesBsp.String_Lbl}"/>
            <Button x:Name="Btn_LocalisationBsp" Text="{x:Static local:ResourcesBsp.String_Btn}" Clicked="Btn_LocalisationBsp_Clicked"/>

        </StackLayout>
    </ScrollView>

    <!--Wird die ContentPage in einer Navigation Page angezeigt, hat diese Zugriff auf die ToolBar-->
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Add"/>
        <ToolbarItem Text="Clear"/>
    </ContentPage.ToolbarItems>
    
</ContentPage>
